from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import database.delete
import database.get
import database.other
import database.update
import user_functions
from logger import logging

# —Ä—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
router = Router()
r"""Router for settings button"""


# –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏–Ω–≥–∞
logging = logging.getLogger(__name__)


class States(StatesGroup):
    r"""Stores which stage of the dialogue the client is at"""
    waiting_for_changed_term = State()


# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@router.message(Command('settings'))
async def notifications_settings_command(message: Message):
    if not database.other.is_user_authorized(message.from_user.id):
        await message.reply('–í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>.')
        return

    is_user_subscribed = database.other.is_user_subscribed(message.from_user.id)

    builder = InlineKeyboardBuilder()

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if is_user_subscribed:
        builder.row(InlineKeyboardButton(text='‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='btn_cancel_notif'))
    else:
        builder.row(InlineKeyboardButton(text='‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='btn_return_notif'))

    builder.row(InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–º–µ—Å—Ç—Ä', callback_data='btn_change_term'))
    builder.row(InlineKeyboardButton(text='–í—ã—Ö–æ–¥', callback_data='btn_exit_notif_menu'))

    info_msg = '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n'
    info_msg += f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - <i>{'–í–∫–ª—é—á–µ–Ω—ã' if is_user_subscribed else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</i>\n'
    info_msg += f'–°–µ–º–µ—Å—Ç—Ä - <i>{database.get.get_user_term(user_id=message.from_user.id)}</i>'

    await message.reply(text=info_msg, reply_markup=builder.as_markup(resize_keyboard=True))


# –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
@router.callback_query(F.data == 'btn_return_notif')
async def btn_return_notif_pressed(query: CallbackQuery):
    # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await query.message.delete()

    warning_message = await query.message.answer('–î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –í–∞—à–∏—Ö —Ä–∞–±–æ—Ç. '
                                                 '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...')
    # logs
    logging.info(f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –¥–ª—è "{query.from_user.id}"...')

    # –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    user_functions.update_all_user_works_list(database.get.get_user_login(query.from_user.id))

    # –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    user_functions.change_user_notification_subscribe(query.from_user.id, True)

    await warning_message.delete()
    await query.message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—è —Å <b>–¥–∞–Ω–Ω–æ–≥–æ</b> –º–æ–º–µ–Ω—Ç–∞ –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')

    # logs
    logging.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')


# –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
@router.callback_query(F.data == 'btn_cancel_notif')
async def btn_cancel_notif_pressed(query: CallbackQuery):
    # –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    database.update.update_user_notification_subscribe(query.from_user.id, False)

    await query.message.delete()
    await query.message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.')


# –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–º–µ—Å—Ç—Ä'
@router.callback_query(F.data == 'btn_change_term')
async def btn_change_term_pressed(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n'
                                    '<i>(–∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É 31 —è–Ω–≤–∞—Ä—è '
                                    '–∏ 31 –∞–≤–≥—É—Å—Ç–∞)</i>')
    await state.set_state(States.waiting_for_changed_term)


# –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –Ω–æ–≤–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
@router.message(States.waiting_for_changed_term)
async def new_term_sent(message: Message, state: FSMContext):
    if not message.text.isdigit() or \
            not (1 <= int(message.text) <= database.get.get_user_max_term(user_id=message.from_user.id)):
        await message.reply(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
        return

    input_term = int(message.text)

    database.update.update_user_term(user_id=message.from_user.id, term=input_term)

    await message.reply(text='–¢–µ–∫—É—â–∏–π —Å–µ–º–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
    await state.clear()


# –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥'
@router.callback_query(F.data == 'btn_exit_notif_menu')
async def btn_exit_notif_menu_pressed(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é.')
